一.列表的增删改查
1.修改：通过下标指定元素后，给元素赋值
li [3] = 555
2.增加：
li =[11,33,44,55,66,77,33]
方法一.append：往列表的尾部添加元素(调用之后，没有返回结果)
li.append(99)
方法二.insert:指定下标位置添加元素
li.insert(3,888)
print(li)
方法三.extend：一次性往列表中添加多个元素,添加到列表的末尾
（不可以指定位置添加，没有返回结果）
li.extend([1,2,3,4])
3.删除：
pop: 指定元素的位置进行删除，不传下标，默认删除最后一个
res= li.pop(3) 是删除的元素,通常是不返回结果
print(li)
remove:指定元素进行删除
li.remove(11)
clear:清空列表
li.clear()
4.查找：
方法一.通过下标，获取指定的元素
print(li[3])
方法二. index：查找指定元素的下标，元素不存在，会报错
rex = li.index(11)
方法三.count：查找元素的个数
rex = li.count(33)
二.列表的排序和复制
1.列表的排序:sort
a.升序
li.sort()
b.降序
li.sort(reverse =True)
c.如何将列表中元素位置反转
li = [11,33,44,55,66,77,33]
方法一.print(li[::-1])
2.列表反转:reverse
方法二.print(li.reverse())
3.复制列表:copy 同时得到两个列表
li = [11,22,33]
li2 = li.copy()
li2.append(44)

#灰色的波浪线：不符合Python的Pep8编码规范
#红色的波浪线：语法错误，少写或者多些了什么东西
快捷键：ctrl+Alt+l 来调整


二.元组(tuple)：使用小括号来定义，里面的元素不能进行修改
1.只有查找方法：
方法一.通过下标，获取指定的元素
print(tuple_01[3])
方法二. index：查找指定元素的下标，元素不存在，会报错
rex = tuple_01.index(11)
方法三.count：查找元素的个数
rex = tuple_01.count(33)
2.特殊元组：
a.空元组
tu =()
b.定义一个只有一个元素的元组
tu1 = (11，)


三.字典(dict)：使用花括号来表示，
1. 字典的定义
空字典：{}
注意点：字典中的元素是由key:value组成的,以逗号分割元素
dic = {'name':'cathy','age':18}
key(键): 同一个字典中的key是唯一的，不能存在重复的key,,字典中的key只能是不可变类型的数据（数值，字符串，元组）
通常是使用字符串
value(值):字典中的Value可以保存任意类型的数据
2.字典的定义方式
方式一:dic = {'name':'cathy','age':18}
方式二:dic = dict(name="cathy",age= 18)
方式三:dic = dict([('name','cathy'),('age',18)])
3.字典的常用操作-增删查改
注意点：字符串，列表，元组支持下标操作，可以通过下标取值，字典是不支持下标取值和切片的
a.添加：通过键直接进行赋值
dic = {'name':'cathy','age':18}
dic['name2'] = 'Eason'
b.修改：通过键直接进行修改,遵从“无则增，有则改”的原则
dic['name'] = 'sun'
print(dic)
c.查找
方式一.直接通过键获取
print（dic['name'])
keyError:通过键获取对应的值的时候，键不存在的时候报错
方式二.get 通过键获取，键不存在的时候，返回Null
print（dic.get('name'))
Null：在python中代表数据为空的意思
d.删除
方法一.pop:通过键删除指定键值对
dic = {'name':'cathy','age':18}
dic.pop('name')
方法二.popitem 删除最近一个添加到字典的键值对（3.5之前是随机的）
print(dic.popitem())
方法三.clear 清空字典
print(dic.clear())

预习字典的方法：
keys 
values
items





